# -*- python-indent: 4; coding: iso-8859-1; mode: python -*-
# Copyright (C) 2008-2011 Cedric Pinson
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Authors:
#  Cedric Pinson <cedric.pinson@plopbyte.com>
#

import unittest
import math
import os

import sys
sys.path.insert(0, "@EXPORTER@")

import bpy
import osg
from io import BytesIO
from osg.osgobject import *
from osg.osgdata import *


def close(a, b, threshold):
    for i in range(0, len(a)):
        if math.fabs(a[i] - b[i]) > threshold:
            return False
    return True


def makeSceneActive(scene):
    bpy.context.screen.scene = bpy.data.scenes[scene]


def string_serialize(osg_object):
    io = BytesIO()
    osg_object.serialize(io)
    return io.getvalue().decode('utf-8')


class Exporter2(unittest.TestCase):
    # ------------------------------------------------------
    def setUp(self):
        osg.osgobject.Object.resetWriter()

    def tearDown(self):
        pass


class Exporter(unittest.TestCase):
    # ------------------------------------------------------
    def setUp(self):
        osg.osgobject.Object.resetWriter()

    def tearDown(self):
        self.removeFile("./textures/One.png")
        self.removeFile("./textures/Two.png")
        self.removeFile("./textures/bbb.png")
        self.removeFile("./textures/sol_trauma_periph.png")

    def removeFile(self, name):
        try:
            os.remove(name)
        except:
            pass

    def testConfig(self):
        conf = osg.osgconf.Config()
        self.assertEquals("", conf.filename)
        self.assertEquals("", conf.author)
        self.assertEquals(2, conf.indent)
        self.assertEquals(None, conf.float_precision)
        self.assertEquals(0, conf.format_num)
        self.assertEquals(25, conf.anim_fps)
        self.assertEquals(None, conf.log_file)
        self.assertEquals(True, conf.log)
        self.assertEquals("ALL", conf.selected)
        self.assertEquals(False, conf.relative_path)
        self.assertEquals(True, conf.export_anim)
        self.assertEquals(os.path.abspath("./"), os.path.abspath(conf.fullpath))
        self.assertEquals([], conf.exclude_objects)


    def testLightSource(self):
        # Float precision is not 5 anymore (optionnal)
        # Set float precision to 5 to pass the tests
        osg.osgobject.FLOATPRE = 5
        osg.osgobject.STRFLT = lambda f: "{1:.{0}f}".format(osg.osgobject.FLOATPRE, float(f))
        node = LightSource()
        node.setName("dummy")
        node.light = Light()
        result = string_serialize(node)
        text = """osg::LightSource {
  UniqueID 0
  Name "dummy"
  Light TRUE {
    osg::Light {
      UniqueID 2
      LightNum 0
      Ambient 0.00000 0.00000 0.00000 1.00000
      Diffuse 0.80000 0.80000 0.80000 1.00000
      Specular 1.00000 1.00000 1.00000 1.00000
      Position 0.00000 0.00000 1.00000 0.00000
      Direction 0.00000 0.00000 -1.00000
      ConstantAttenuation 1.00000
      LinearAttenuation 0.00000
      QuadraticAttenuation 0.00000
      SpotExponent 0.00000
      SpotCutoff 180.00000
    }
  }
}
"""
        self.assertEquals(text, result)

    def testMatrixTransform(self):
        node = MatrixTransform()
        node.setName("test")
        result = string_serialize(node)
        text = """osg::MatrixTransform {
  UniqueID 0
  Name "test"
  Matrix {
    1.00000 0.00000 0.00000 0.00000
    0.00000 1.00000 0.00000 0.00000
    0.00000 0.00000 1.00000 0.00000
    0.00000 0.00000 0.00000 1.00000
  }
}
"""
        self.assertEquals(text, result)

    def testNormalArray(self):
        normals = NormalArray()
        normals.getArray().append((0, 1, 20))
        result = string_serialize(normals)
        text = """NormalData {
  Array TRUE ArrayID 0 Vec3fArray 1 {
    0.00000 1.00000 20.00000
  }
  Indices FALSE
  Binding BIND_PER_VERTEX
  Normalize 0
}
"""
        self.assertEquals(text, result)

    def testBroken(self):
        makeSceneActive("Broken")
        exporter = Export()
        exporter.process()
        exporter.write()
        self.assertEquals("DrawElementsUByte", exporter.items[2].children[0].drawables[0].primitives[0].getSizeArray())
        self.assertEquals("DrawElementsUByte", exporter.items[0].children[0].drawables[0].primitives[0].getSizeArray())

    def testLight(self):
        makeSceneActive("Light")
        exporter = Export()
        exporter.process()
        exporter.write()
        self.assertEquals(5, len(exporter.items))

    def testIpos(self):
        makeSceneActive("Ipos")
        exporter = Export()
        exporter.config.filename = "ipos"
        exporter.process()
        self.assertEquals(6, len(exporter.animations))
        exporter.write()

    def testInstance(self):
        makeSceneActive("Instance")
        exporter = Export()
        exporter.process()
        exporter.write()

    def testBadTextureExport(self):
        makeSceneActive("Bug")
        exporter = Export()
        exporter.process()
        exporter.write()
        search = "sol_trauma_periph.png"
        found = False
        print(exporter.images)
        for i in exporter.images:
            print("check with ", i.name)
            if i.name == search:
                found = True
        self.assertEquals(True, found)

    def testConfigNoAnimations(self):
        makeSceneActive("Ipos")
        exporter = Export()
        exporter.config.export_anim = False
        exporter.config.filename = "ipos_noanimation"
        exporter.process()
        exporter.write()
        self.assertEquals(0, len(exporter.animations))

    def testPostProcessAnimations(self):
        return
        makeSceneActive("Armature")
        exporter = Export()
        exporter.config.export_anim = True
        exporter.config.filename = "action_postprocess"
        exporter.process()
        exporter.postProcess()
        exporter.write()
        self.assertEquals(1, len(exporter.animations))

    def testPostProcessAnimationsNathan(self):
        return
        makeSceneActive("Ipos")
        exporter = Export()
        exporter.config.export_anim = True
        exporter.config.filename = "ipos_postprocess"
        exporter.process()
        exporter.postProcess()
        exporter.write()
        self.assertEquals(5, len(exporter.animations))


if __name__ == '__main__':
    suite = unittest.TestLoader().loadTestsFromTestCase(Exporter)
    result = unittest.TextTestRunner(verbosity=2).run(suite)
    sys.exit(not result.wasSuccessful())
